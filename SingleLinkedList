// SingleLinkedList
class SingleLinkedList {
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;

        }
    }
    Node head = null;
    public void insertAtBeg(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;

    }

    public void  insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null)
            temp = temp.next;
           temp.next = newNode;
    }
    public void insertAtPosition(int data, int position) {
        if (position < 0) {
            System.out.println("Position Should be >= 0");
            return;
        }
        Node newNode = new Node(data);

        if (position == 0) {
            newNode.next = head;
            head = newNode;
            return;
        }
        Node temp = head;
        int count = 0;

        while (temp != null && count < position - 1) {
            temp = temp.next;
            count++;
        }
        if (temp == null) {
            System.out.println("Position out of Bounds");
            return;
        }
        newNode.next = temp.next;
        temp.next = newNode;

    }


    public void display() {
        Node temp = head;
        System.out.print("Linked List: ");
        while ( temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        SingleLinkedList list = new SingleLinkedList();

        list.insertAtBeg(30);
        list.insertAtBeg(20);
        list.insertAtBeg(10);

        list.insertAtEnd(40);
        list.insertAtEnd(50);

        list.insertAtPosition(25,3);
        list.insertAtPosition(5,1);
        list.insertAtPosition(60,10);
        list.display();
    }
}

